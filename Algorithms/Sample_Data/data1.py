'''

    This program contains a dictionary which stores the sample data i.e titles and abstracts.
    The title is the key and the abstract is the value of the key.

'''
sample_data={'Mobile Search Behaviors: An In-depth Analysis Based on Contexts, APPs, and Devices':'With the rapid development of mobile Internet and smart personal devices in recent years, mobile search has gradually emerged as a key method with which users seek online information. In addition, cross-device search also has been regarded recently as an important research topic. As more mobile applications (APPs) integrate search functions, a user"s mobile search behavior on different APPs becomes more significant. This book provides a systematic review of current mobile search analysis and studies user mobile search behavior from several perspectives, including mobile search context, APP usage, and different devices. Two different user experiments to collect user behavior data were conducted. Then, through the data from user mobile phone usage logs in natural settings, we analyze the mobile search strategies employed and offer a context-based mobile search task collection, which then can be used to evaluate the mobile search engine. In addition, we combine mobile search with APP usage to give more in-depth analysis, such as APP transition in mobile search and follow-up actions triggered by mobile search. The study, combining the mobile search with APP usage, can contribute to the interaction design of APPs, such as the search recommendation and APP recommendation. Addressing the phenomenon of users owning more smart devices today than ever before, we focus on user cross device search behavior. We model the information preparation behavior and information resumption behavior in cross-device search and evaluate the search performance in cross-device search. Research on mobile search behaviors across different devices can help to understand online user information behavior comprehensively and help users resume their search tasks on different devices',#1
            'A Sequential Recommendation for Mobile Apps: What will User Click Next App?':'With the advances in smartphones users install abundant apps to facilitate their daily lives. Both users and related developers have increasing requirements to understand the mobile App usage pattern, for individual and commercial use. Respectively, personalized App recommendation methods and systems have emerged as a novel attractive topic that can demonstrate the human App usage behavior. The mobile Apps recommendation can serve as a cornerstone for a variety of intelligent services, such as fast-launching UIs, intelligent user phone interactions, and battery management of cellphones. In this paper, we develop a novel App recommendation framework combining the historical App usage data with the sequence of recently-used Apps. Speciﬁcally, our framework is an extension of the user-based collaborative ﬁltering technique, where the set of nearest neighbors is employed for training the prediction model. However, our prediction scheme is constructed on the temporal sequential data and is modeled by using the chain augmented Naive Bayes model. Experiments with a real mobile Internet record dataset demonstrate that the accuracy of our framework outperforms several baseline App recommendation approaches.',#2
            'Helicopter Navigation in Coastal Zone  Based on Terrestrial Radio-Beacon System':'In certain scenarios, especially in areas of armed conflict, the use of satellite navigation may be inaccurate or impossible. In such cases, it is desirable to use backup terrestrial navigation systems. In 2016, we proposed the concept of such a system dedicated to vessels. Its basis is a radio-beacon system deployed on lighthouses along the coast. The proposed medium-range navigation system for use in the coastal zone is based on the signal Doppler frequency (SDF) method. In this paper, we analyze the possibility of positioning a helicopter based on this system. This assessment is based on simulation studies.',#3
            'Optimization of cost to calculate the release time in software reliability using python':'As the competition among softwares have been increasing day by day, it made the IT sector to grow at different level. Whenever a software product comes into the market, a list of factors begin to originate and demand for changes. Hence there can arise defects in the software and so defects needed to be repaired. Also sales and demands of softwares are  increasing day by day . So it becomes difficult to decide which software will be appropriate for the customer. As competitors are adding features and functions everyday to evolve technology that requires new upgrades to support latest versions of software. In order to maintain these new features, to win over prospects , testing is required to be done. Testing can be seen for technical case, business case, and economical case and especially for the reliability estimation.The prediction of faults in the software is another term in case of determining the outcome of the software product and the certain number of testing will be needed. Software reliability models techniques are employed for the perfect optimization on its release time. This research gives the idea of using both original release time and predicted release time to be executed and hence to obtain an optimized cost for  release time. This will help to decide the effective cost of reliability of the software. Further going, this will help the customer to have the better selection on choosing the effective software. Thus through the python we have optimized the cost and found the release time of software to decide that this software will give the better output.',#4
            'The Collaborative Virtual Reality Neurorobotics Lab':'We present the collaborative Virtual Reality Neurorobotics Lab, which allows multiple collocated and remote users to experience, discuss and participate in neurorobotic experiments in immersive virtual reality. We describe the coupling of the Neurorobotics Platform of the Human Brain Project with our collaborative virtual reality and 3D telepresence infrastructure and highlight future opportunities arising from our work for research on direct human interaction with simulated robots and brains.',#5
            'Block Design-Based Key Agreement for Group Data Sharing in Cloud Computing':'Data sharing in cloud computing enables multiple participants to freely share the group data, which improves the efficiency of work in cooperative environments and has widespread potential applications. However, how to ensure the security of data sharing within a group and how to efficiently share the outsourced data in a group manner are formidable challenges. Note that key agreement protocols have played a very important role in secure and efficient group data sharing in cloud computing. In this paper, by taking advantage of the symmetric balanced incomplete block design (SBIBD), we present a novel block design-based key agreement protocol that supports multiple participants, which can flexibly extend the number of participants in a cloud environment according to the structure of the block design. Based on the proposed group data sharing model, we present general formulas for generating the common conference key IC for multiple participants. Note that by benefiting from the (v, k + 1, 1)-block design, the computational complexity of the proposed protocol linearly increases with the number of participants and the communication complexity is greatly reduced. In addition, the fault tolerance property of our protocol enables the group data sharing in cloud computing to withstand different key attacks, which is similar to Yi"s protocol.',#6
            'One Quantifiable Security Evaluation Model for Cloud Computing Platform':'Whatever one public cloud, private cloud or a mixed cloud, the users lack of effective security quantifiable evaluation methods to grasp the security situation of its own information infrastructure on the whole. This paper provides a quantifiable security evaluation system for different clouds that can be accessed by consistent API. The evaluation system includes security scanning engine, security recovery engine, security quantifiable evaluation model, visual display module and etc. The security evaluation model composes of a set of evaluation elements corresponding different fields, such as computing, storage, network, maintenance, application security and etc. Each element is assigned a three tuple on vulnerabilities, score and repair method. The system adopts “One vote vetoed” mechanism for one field to count its score and adds up the summary as the total score, and to create one security view. We implement the quantifiable evaluation for different cloud users based on our G-Cloud platform. It shows the dynamic security scanning score for one or multiple clouds with visual graphs and guided users to modify configuration, improve operation and repair vulnerabilities, so as to improve the security of their cloud resources.',#7            
}